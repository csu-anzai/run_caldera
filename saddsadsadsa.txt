
解密https获取明文，从明文角度出发：
1、	github上传分析：
首先通过content-disposition选择文件，出现4条https流量，
前两条流量为了确定上传到github的文件的属性，以及要上传的地址
829：将文件传入亚马逊的服务器上。
此时文件已经上传到服务器上了。
830：将文件传入github。
 
 
 
如果选择不是master，会多出现一次对亚马逊的请求，以options请求方式。
2、	github创建文件
 
只有一条报文
只利用https，信息量太少，还是需要捕获底层的流量包。


总体来说只要发现亚马逊的服务器，就表示再上传文件。

对github分析
浏览器：
1、	downloads
 
2、	上传
 
 

	上传	下载
Tcp包，ssl认证过程中	Encrypted handshake message	没有这条包


	浏览器	Git(https方式)
上传	s3.amazonaws.com	通过api.github.com认证，上传到github.com 
下载	Codeload.github.com	直接通过github.com

















Git	Github.com	52.74.223.119	13.250.177.223	13.229.188.59	下载
	Api.github.com	13.250.168.23	13.250.94.254	54.169.195.247	认证
					
chrome	github-cloud.s3.amazonaws.com	Ip是变动的			
	github-production-upload-manifest-file-7fdce7.s3.amazonaws.com:	Ip是变动的
			上传地址
	codeload.github.com 	13.250.162.133	13.229.189.0	54.251.140.56	下载地址


浏览器下载流程：
	codeload.github.com
没有Handshake Protocol: Encrypted Handshake Message
浏览器上传流程：
	github-production-upload-manifest-file-7fdce7.s3.amazonaws.com
服务器和客户端(双向验证)
	Handshake Protocol: Encrypted Handshake Message(双向)

Git(https)下载：
	Github.com
Git(https)上传：
	连接github.com中途访问api.github.com
	通过Api.github.com验证， 
		服务器和客户端(双向验证)
		Handshake Protocol: Encrypted Handshake Message(双向)
	然后上传到Github.com，


1：api.github.com
2: 其他电脑下





git  下载
 


上传
 























